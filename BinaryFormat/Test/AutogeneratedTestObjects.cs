// InputSha F3E6A3879036FA2DF96FBBF2B55CBC654D8155B7
//
// This file was autogenerated using the BinaryFormatCodeGenerator
//     GenerationDateTime : 3/28/2018 12:35:17 PM
//
using System;
using System.Text;

using More;

namespace More.Net.BinaryFormatTestObjects
{
    public enum DayOfWeek {
        Sunday = 0,
        Monday = 1,
        Tuesday = 2,
        Wednesday = 3,
        Thursday = 4,
        Friday = 5,
        Saturday = 6,
    }
    public class AByte
    {
        public const UInt32 FixedSerializationLength = 1;

        static InstanceSerializer serializer = null;
        public static InstanceSerializer Serializer
        {
            get
            {
                if(serializer == null) serializer = new InstanceSerializer();
                return serializer;
            }
        }

        public class InstanceSerializer : FixedLengthInstanceSerializer<AByte>
        {
            public InstanceSerializer() {}
            public override UInt32 FixedSerializationLength() { return AByte.FixedSerializationLength; }
            public override void FixedLengthSerialize(Byte[] bytes, UInt32 offset, AByte instance)
            {
                bytes[offset] = instance.value;
                offset += 1;
            }
            public override AByte FixedLengthDeserialize(Byte[] bytes, UInt32 offset)
            {
                return new AByte (
                    bytes[offset + 0] // value
                );
            }
            public override void DataString(AByte instance, StringBuilder builder)
            {
                builder.Append("AByte:{");
                builder.Append(instance.value);
                builder.Append("}");
            }
            public override void DataSmallString(AByte instance, StringBuilder builder)
            {
                builder.Append("AByte:{");
                builder.Append(instance.value);
                builder.Append("}");
            }
        }

        public Byte value;
        public AByte() { }
        public AByte(Byte value)
        {
            this.value = value;
        }
        public FixedLengthInstanceSerializerAdapter<AByte> CreateSerializerAdapater()
        {
            return new FixedLengthInstanceSerializerAdapter<AByte>(Serializer, this);
        }
    }
    public class AnSByte
    {
        public const UInt32 FixedSerializationLength = 1;

        static InstanceSerializer serializer = null;
        public static InstanceSerializer Serializer
        {
            get
            {
                if(serializer == null) serializer = new InstanceSerializer();
                return serializer;
            }
        }

        public class InstanceSerializer : FixedLengthInstanceSerializer<AnSByte>
        {
            public InstanceSerializer() {}
            public override UInt32 FixedSerializationLength() { return AnSByte.FixedSerializationLength; }
            public override void FixedLengthSerialize(Byte[] bytes, UInt32 offset, AnSByte instance)
            {
                bytes[offset] = (Byte)instance.value;
                offset += 1;
            }
            public override AnSByte FixedLengthDeserialize(Byte[] bytes, UInt32 offset)
            {
                return new AnSByte (
                    (SByte)bytes[offset + 0] // value
                );
            }
            public override void DataString(AnSByte instance, StringBuilder builder)
            {
                builder.Append("AnSByte:{");
                builder.Append(instance.value);
                builder.Append("}");
            }
            public override void DataSmallString(AnSByte instance, StringBuilder builder)
            {
                builder.Append("AnSByte:{");
                builder.Append(instance.value);
                builder.Append("}");
            }
        }

        public SByte value;
        public AnSByte() { }
        public AnSByte(SByte value)
        {
            this.value = value;
        }
        public FixedLengthInstanceSerializerAdapter<AnSByte> CreateSerializerAdapater()
        {
            return new FixedLengthInstanceSerializerAdapter<AnSByte>(Serializer, this);
        }
    }
    public class AUInt16
    {
        public const UInt32 FixedSerializationLength = 2;

        static InstanceSerializer serializer = null;
        public static InstanceSerializer Serializer
        {
            get
            {
                if(serializer == null) serializer = new InstanceSerializer();
                return serializer;
            }
        }

        public class InstanceSerializer : FixedLengthInstanceSerializer<AUInt16>
        {
            public InstanceSerializer() {}
            public override UInt32 FixedSerializationLength() { return AUInt16.FixedSerializationLength; }
            public override void FixedLengthSerialize(Byte[] bytes, UInt32 offset, AUInt16 instance)
            {
                bytes.BigEndianSetUInt16(offset, instance.value);
                offset += 2;
            }
            public override AUInt16 FixedLengthDeserialize(Byte[] bytes, UInt32 offset)
            {
                return new AUInt16 (
                    bytes.BigEndianReadUInt16(offset + 0) // value
                );
            }
            public override void DataString(AUInt16 instance, StringBuilder builder)
            {
                builder.Append("AUInt16:{");
                builder.Append(instance.value);
                builder.Append("}");
            }
            public override void DataSmallString(AUInt16 instance, StringBuilder builder)
            {
                builder.Append("AUInt16:{");
                builder.Append(instance.value);
                builder.Append("}");
            }
        }

        public UInt16 value;
        public AUInt16() { }
        public AUInt16(UInt16 value)
        {
            this.value = value;
        }
        public FixedLengthInstanceSerializerAdapter<AUInt16> CreateSerializerAdapater()
        {
            return new FixedLengthInstanceSerializerAdapter<AUInt16>(Serializer, this);
        }
    }
    public class AnInt16
    {
        public const UInt32 FixedSerializationLength = 2;

        static InstanceSerializer serializer = null;
        public static InstanceSerializer Serializer
        {
            get
            {
                if(serializer == null) serializer = new InstanceSerializer();
                return serializer;
            }
        }

        public class InstanceSerializer : FixedLengthInstanceSerializer<AnInt16>
        {
            public InstanceSerializer() {}
            public override UInt32 FixedSerializationLength() { return AnInt16.FixedSerializationLength; }
            public override void FixedLengthSerialize(Byte[] bytes, UInt32 offset, AnInt16 instance)
            {
                bytes.BigEndianSetInt16(offset, instance.value);
                offset += 2;
            }
            public override AnInt16 FixedLengthDeserialize(Byte[] bytes, UInt32 offset)
            {
                return new AnInt16 (
                    bytes.BigEndianReadInt16(offset + 0) // value
                );
            }
            public override void DataString(AnInt16 instance, StringBuilder builder)
            {
                builder.Append("AnInt16:{");
                builder.Append(instance.value);
                builder.Append("}");
            }
            public override void DataSmallString(AnInt16 instance, StringBuilder builder)
            {
                builder.Append("AnInt16:{");
                builder.Append(instance.value);
                builder.Append("}");
            }
        }

        public Int16 value;
        public AnInt16() { }
        public AnInt16(Int16 value)
        {
            this.value = value;
        }
        public FixedLengthInstanceSerializerAdapter<AnInt16> CreateSerializerAdapater()
        {
            return new FixedLengthInstanceSerializerAdapter<AnInt16>(Serializer, this);
        }
    }
    public class AUInt24
    {
        public const UInt32 FixedSerializationLength = 3;

        static InstanceSerializer serializer = null;
        public static InstanceSerializer Serializer
        {
            get
            {
                if(serializer == null) serializer = new InstanceSerializer();
                return serializer;
            }
        }

        public class InstanceSerializer : FixedLengthInstanceSerializer<AUInt24>
        {
            public InstanceSerializer() {}
            public override UInt32 FixedSerializationLength() { return AUInt24.FixedSerializationLength; }
            public override void FixedLengthSerialize(Byte[] bytes, UInt32 offset, AUInt24 instance)
            {
                bytes.BigEndianSetUInt24(offset, instance.value);
                offset += 3;
            }
            public override AUInt24 FixedLengthDeserialize(Byte[] bytes, UInt32 offset)
            {
                return new AUInt24 (
                    bytes.BigEndianReadUInt24(offset + 0) // value
                );
            }
            public override void DataString(AUInt24 instance, StringBuilder builder)
            {
                builder.Append("AUInt24:{");
                builder.Append(instance.value);
                builder.Append("}");
            }
            public override void DataSmallString(AUInt24 instance, StringBuilder builder)
            {
                builder.Append("AUInt24:{");
                builder.Append(instance.value);
                builder.Append("}");
            }
        }

        public UInt32 value;
        public AUInt24() { }
        public AUInt24(UInt32 value)
        {
            this.value = value;
        }
        public FixedLengthInstanceSerializerAdapter<AUInt24> CreateSerializerAdapater()
        {
            return new FixedLengthInstanceSerializerAdapter<AUInt24>(Serializer, this);
        }
    }
    public class FixedLengthArrayObject
    {
        public const UInt32 FixedSerializationLength = 124;

        static InstanceSerializer serializer = null;
        public static InstanceSerializer Serializer
        {
            get
            {
                if(serializer == null) serializer = new InstanceSerializer();
                return serializer;
            }
        }

        public class InstanceSerializer : FixedLengthInstanceSerializer<FixedLengthArrayObject>
        {
            public InstanceSerializer() {}
            public override UInt32 FixedSerializationLength() { return FixedLengthArrayObject.FixedSerializationLength; }
            public override void FixedLengthSerialize(Byte[] bytes, UInt32 offset, FixedLengthArrayObject instance)
            {
                Array.Copy(instance.FixedByteArray, 0, bytes, offset, 28);
                offset += 28;
                Array.Copy(instance.FixedSByteArray, 0, bytes, offset, 52);
                offset += 52;
                for(int i = 0; i < 5; i++)
                {
                    bytes.BigEndianSetUInt32(offset, instance.FixedUInt32Array[i]);
                    offset += 4;
                }
                for(int i = 0; i < 7; i++)
                {
                    AnSByte.Serializer.Serialize(bytes, offset, instance.FixedObjectArray[i]);
                    offset += 1;
                }
                for(int i = 0; i < 17; i++)
                {
                    ByteEnumSerializer<DayOfWeek>.Instance.FixedLengthSerialize(bytes, offset, instance.FixedEnumArray[i]);
                    offset += 1;
                }
            }
            public override FixedLengthArrayObject FixedLengthDeserialize(Byte[] bytes, UInt32 offset)
            {
                return new FixedLengthArrayObject (
                bytes.CreateSubArray(offset + 0, 28), // FixedByteArray
                bytes.CreateSubSByteArray(offset + 28, 52), // FixedSByteArray
                BigEndianUInt32Serializer.Instance.FixedLengthDeserializeArray(bytes, offset + 80, 5), // FixedUInt32Array
                AnSByte.Serializer.FixedLengthDeserializeArray(bytes, offset + 100, 7), // FixedObjectArray
                ByteEnumSerializer<DayOfWeek>.Instance.FixedLengthDeserializeArray(bytes, offset + 107, 17) // FixedEnumArray
                );
            }
            public override void DataString(FixedLengthArrayObject instance, StringBuilder builder)
            {
                builder.Append("FixedLengthArrayObject:{");
                // Arrays inside dynamic length objects not implemented
                builder.Append(',');
                // Arrays inside dynamic length objects not implemented
                builder.Append(',');
                // Arrays inside dynamic length objects not implemented
                builder.Append(',');
                // Arrays inside dynamic length objects not implemented
                builder.Append(',');
                // Arrays inside dynamic length objects not implemented
                builder.Append("}");
            }
            public override void DataSmallString(FixedLengthArrayObject instance, StringBuilder builder)
            {
                builder.Append("FixedLengthArrayObject:{");
            // Arrays inside dynamic length objects not implemented
                builder.Append(',');
            // Arrays inside dynamic length objects not implemented
                builder.Append(',');
            // Arrays inside dynamic length objects not implemented
                builder.Append(',');
            // Arrays inside dynamic length objects not implemented
                builder.Append(',');
            // Arrays inside dynamic length objects not implemented
                builder.Append("}");
            }
        }

        public Byte[] FixedByteArray;
        public SByte[] FixedSByteArray;
        public UInt32[] FixedUInt32Array;
        public AnSByte[] FixedObjectArray;
        public DayOfWeek[] FixedEnumArray;
        public FixedLengthArrayObject() { }
        public FixedLengthArrayObject(Byte[] FixedByteArray, SByte[] FixedSByteArray, UInt32[] FixedUInt32Array, AnSByte[] FixedObjectArray, DayOfWeek[] FixedEnumArray)
        {
            this.FixedByteArray = FixedByteArray;
            this.FixedSByteArray = FixedSByteArray;
            this.FixedUInt32Array = FixedUInt32Array;
            this.FixedObjectArray = FixedObjectArray;
            this.FixedEnumArray = FixedEnumArray;
        }
        public FixedLengthInstanceSerializerAdapter<FixedLengthArrayObject> CreateSerializerAdapater()
        {
            return new FixedLengthInstanceSerializerAdapter<FixedLengthArrayObject>(Serializer, this);
        }
    }
    public class DynamicLengthObject
    {
        static InstanceSerializer serializer = null;
        public static InstanceSerializer Serializer
        {
            get
            {
                if(serializer == null) serializer = new InstanceSerializer();
                return serializer;
            }
        }

        public class InstanceSerializer : IInstanceSerializer<DynamicLengthObject>
        {
            public InstanceSerializer() {}
            public UInt32 SerializationLength(DynamicLengthObject instance)
            {
                UInt32 dynamicLengthPart = 0;
                if(instance.AByteArray != null) dynamicLengthPart += (UInt32)instance.AByteArray.Length * 1;
                return 1 + dynamicLengthPart;
            }
            public UInt32 Serialize(Byte[] bytes, UInt32 offset, DynamicLengthObject instance)
            {
                UInt32 arrayLength;
                arrayLength = (instance.AByteArray == null) ? 0 : (UInt32)instance.AByteArray.Length;
                bytes[offset] = (Byte)(Byte)arrayLength;
                offset += 1;
                for(UInt32 i = 0; i < arrayLength; i++)
                {
                    bytes[offset] = instance.AByteArray[i];
                    offset += 1;
                }
                return offset;
            }
            public UInt32 Deserialize(Byte[] bytes, UInt32 offset, UInt32 offsetLimit, out DynamicLengthObject outInstance)
            {
                UInt32 arrayLength;
                DynamicLengthObject instance = new DynamicLengthObject();
                arrayLength = (Byte)bytes[offset];
                offset += 1;
                instance.AByteArray = bytes.CreateSubArray(offset, arrayLength);
                offset += 1 * arrayLength;
                outInstance = instance;
                return offset;
            }
            public void DataString(DynamicLengthObject instance, StringBuilder builder)
            {
                builder.Append("DynamicLengthObject:{");
                // Arrays inside dynamic length objects not implemented
                builder.Append("}");
            }
            public void DataSmallString(DynamicLengthObject instance, StringBuilder builder)
            {
                builder.Append("DynamicLengthObject:{");
            // Arrays inside dynamic length objects not implemented
                builder.Append("}");
            }
        }

        public Byte[] AByteArray;
        public DynamicLengthObject() { }
        public DynamicLengthObject(Byte[] AByteArray)
        {
            this.AByteArray = AByteArray;
        }
        public InstanceSerializerAdapter<DynamicLengthObject> CreateSerializerAdapater()
        {
            return new InstanceSerializerAdapter<DynamicLengthObject>(Serializer, this);
        }
    }
    public class AnotherDynamicLengthObject
    {
        static InstanceSerializer serializer = null;
        public static InstanceSerializer Serializer
        {
            get
            {
                if(serializer == null) serializer = new InstanceSerializer();
                return serializer;
            }
        }

        public class InstanceSerializer : IInstanceSerializer<AnotherDynamicLengthObject>
        {
            public InstanceSerializer() {}
            public UInt32 SerializationLength(AnotherDynamicLengthObject instance)
            {
                UInt32 dynamicLengthPart = 0;
                if(instance.FixedObjectByteLength != null) dynamicLengthPart += (UInt32)instance.FixedObjectByteLength.Length * 1;
                if(instance.DynamicObjectByteLength != null)
                {
                    for(int i = 0; i < instance.DynamicObjectByteLength.Length; i++)
                    {
                        dynamicLengthPart += DynamicLengthObject.Serializer.SerializationLength(instance.DynamicObjectByteLength[i]);
                    }
                }
                for(int i = 0; i < 32; i++)
                {
                    dynamicLengthPart += DynamicLengthObject.Serializer.SerializationLength(instance.DynamicObject32ByteLength[i]);
                }
                dynamicLengthPart += DynamicLengthObject.Serializer.SerializationLength(instance.SingleDynamicLengthObject);
                return 26 + dynamicLengthPart;
            }
            public UInt32 Serialize(Byte[] bytes, UInt32 offset, AnotherDynamicLengthObject instance)
            {
                UInt32 arrayLength;
                arrayLength = (instance.FixedObjectByteLength == null) ? 0 : (UInt32)instance.FixedObjectByteLength.Length;
                bytes[offset] = (Byte)(Byte)arrayLength;
                offset += 1;
                for(UInt32 i = 0; i < arrayLength; i++)
                {
                    bytes[offset] = instance.FixedObjectByteLength[i];
                    offset += 1;
                }
                for(UInt32 i = 0; i < 24; i++)
                {
                    bytes[offset] = instance.FixedObject24ByteLength[i];
                    offset += 1;
                }
                arrayLength = (instance.DynamicObjectByteLength == null) ? 0 : (UInt32)instance.DynamicObjectByteLength.Length;
                bytes[offset] = (Byte)(Byte)arrayLength;
                offset += 1;
                for(UInt32 i = 0; i < arrayLength; i++)
                {
                    offset = DynamicLengthObject.Serializer.Serialize(bytes, offset, instance.DynamicObjectByteLength[i]);
                }
                for(UInt32 i = 0; i < 32; i++)
                {
                    offset = DynamicLengthObject.Serializer.Serialize(bytes, offset, instance.DynamicObject32ByteLength[i]);
                }
                offset = DynamicLengthObject.Serializer.Serialize(bytes, offset, instance.SingleDynamicLengthObject);
                return offset;
            }
            public UInt32 Deserialize(Byte[] bytes, UInt32 offset, UInt32 offsetLimit, out AnotherDynamicLengthObject outInstance)
            {
                UInt32 arrayLength;
                AnotherDynamicLengthObject instance = new AnotherDynamicLengthObject();
                arrayLength = (Byte)bytes[offset];
                offset += 1;
                instance.FixedObjectByteLength = bytes.CreateSubArray(offset, arrayLength);
                offset += 1 * arrayLength;
                instance.FixedObject24ByteLength = bytes.CreateSubArray(offset, 24);
                offset += 1 * 24;
                arrayLength = (Byte)bytes[offset];
                offset += 1;
// Dynamic Length Element Arrays are not yet implemented
// Dynamic Length Element Arrays are not yet implemented
                // not implemented; //instance.SingleDynamicLengthObject;
                outInstance = instance;
                return offset;
            }
            public void DataString(AnotherDynamicLengthObject instance, StringBuilder builder)
            {
                builder.Append("AnotherDynamicLengthObject:{");
                // Arrays inside dynamic length objects not implemented
                builder.Append(',');
                // Arrays inside dynamic length objects not implemented
                builder.Append(',');
                // Arrays inside dynamic length objects not implemented
                builder.Append(',');
                // Arrays inside dynamic length objects not implemented
                builder.Append(',');
                DynamicLengthObject.Serializer.DataString(instance.SingleDynamicLengthObject, builder);
                builder.Append("}");
            }
            public void DataSmallString(AnotherDynamicLengthObject instance, StringBuilder builder)
            {
                builder.Append("AnotherDynamicLengthObject:{");
            // Arrays inside dynamic length objects not implemented
                builder.Append(',');
            // Arrays inside dynamic length objects not implemented
                builder.Append(',');
            // Arrays inside dynamic length objects not implemented
                builder.Append(',');
            // Arrays inside dynamic length objects not implemented
                builder.Append(',');
                DynamicLengthObject.Serializer.DataSmallString(instance.SingleDynamicLengthObject, builder);
                builder.Append("}");
            }
        }

        public Byte[] FixedObjectByteLength;
        public Byte[] FixedObject24ByteLength;
        public DynamicLengthObject[] DynamicObjectByteLength;
        public DynamicLengthObject[] DynamicObject32ByteLength;
        public DynamicLengthObject SingleDynamicLengthObject;
        public AnotherDynamicLengthObject() { }
        public AnotherDynamicLengthObject(Byte[] FixedObjectByteLength, Byte[] FixedObject24ByteLength, DynamicLengthObject[] DynamicObjectByteLength, DynamicLengthObject[] DynamicObject32ByteLength, DynamicLengthObject SingleDynamicLengthObject)
        {
            this.FixedObjectByteLength = FixedObjectByteLength;
            this.FixedObject24ByteLength = FixedObject24ByteLength;
            this.DynamicObjectByteLength = DynamicObjectByteLength;
            this.DynamicObject32ByteLength = DynamicObject32ByteLength;
            this.SingleDynamicLengthObject = SingleDynamicLengthObject;
        }
        public InstanceSerializerAdapter<AnotherDynamicLengthObject> CreateSerializerAdapater()
        {
            return new InstanceSerializerAdapter<AnotherDynamicLengthObject>(Serializer, this);
        }
    }
}
